A CLI for managing secrets.

Secrets are encrypted with an ephemeral key managed by KMS. The ciphertexts are stored in a local
YAML file that is safe to distribute in source control, deployments, CI systems, etc.

To store your first secret:

	$ secrets -f frontend.yml -k arn:aws:kms:us-west...:key/24f... put db_username putin
	$ cat frontend.yml
	db_username:
		key_id: arn:aws:kms:us-west...:key/24f...
		key_manager: kms
		key_ciphertext: CiB9r3U+rrvEBKL/7ei...
		algorithm: secretbox
		ciphertext: ehPzEUMsRRP+...

Optionally omit the key when storing subsequent secrets:

	$ secrets -f frontend.yml put db_password 1234

To read secrets:

	$ secrets -f frontend.yml get db_password
	1234

Secrets are encrypted locally using secretbox (NaCl) or AES-GCM-256.

Policies or Grants attached to KMS keys determine which IAM users or roles are allowed to perform
encryption and decryption operations under a specific key. Writing secrets requires
kms:GenerateDataKey, and reading secrets requires kms:Decrypt.

Secrets are encrypted with an EncryptionContext of {"SecretId": name}, which allows fine-grained
grants restricted to specific secrets rather than to all secrets encrypted under a key. This example
creates a grant allowing an ARN (such as an IAM Role or user) to decrypt only a single value:

    $ aws kms create-grant --key-id ${KEY_ID} --grantee-principal ${ARN} \
        --operations Decrypt --constraints EncryptionContextSubset={SecretId=db_password}

All KMS operations are logged to CloudTrail (if enabled).

Depending on your particular AWS configuration, you may need to set the
AWS_REGION or AWS_PROFILE environment variables.
