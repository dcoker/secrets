// Code generated by go-bindata.
// sources:
// docs/usage.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsUsageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x4e\xdb\x40\x10\x3d\x67\xbf\x62\x0e\x3d\xb4\xa2\x31\x2a\xd0\x56\xf5\x2d\x84\x34\x8a\x48\x20\x4a\x40\xa8\x27\x34\xb1\x27\xf6\x8a\xf5\xae\x99\x5d\x13\xdc\xaf\xef\xac\x1d\x4a\x90\xaa\xb6\x37\xef\x7a\xde\x9b\x99\xf7\xde\x8e\x60\x3c\x9f\xc1\xd6\x31\x54\x68\xb1\xd0\xb6\x00\x4f\x19\x53\xf0\x89\x52\xeb\xfe\x0b\x90\x09\xc8\x66\xdc\xd6\x81\x72\xd8\xe9\x50\x02\x5a\xa0\xba\xa4\x8a\x18\x0d\x3c\x50\xdb\xc3\xe5\xef\xa6\x85\xcb\xc5\x3a\x81\x9b\x92\x54\xa6\xa5\x84\x03\x3d\xef\x39\x7c\x70\x2c\x25\xda\x02\x82\x71\x99\x20\x7f\x8c\x16\x73\xd8\x6a\x43\xd2\xed\xc6\xf5\x05\xd0\xba\x86\xe5\x92\x7d\xd8\xcf\x92\x2a\x35\x78\xf7\x32\x17\x0c\xb7\xb0\x65\x67\x03\xd9\x3c\x69\x2b\x03\xc3\x07\x21\xb7\x29\xee\x7c\xfa\x50\xf9\xb4\xf1\xc3\x1d\xf9\x90\x24\x49\x2a\x73\x1d\x9f\x9c\x6d\xe5\x13\xea\x26\x40\xbe\xb9\x6f\x3c\xb1\xc5\x8a\xe2\x59\xdb\xc8\x9a\x61\x78\x43\xa7\x06\x07\x65\xa9\x1a\x0c\x84\xe4\x5e\xe7\xe9\xbf\x7b\xec\x6b\x7b\x21\x38\x05\x29\xdc\x5f\xbd\xea\x90\xc2\x58\x9f\x7f\xe3\xd3\xdb\x23\xe6\xa7\xc9\xf9\xe5\xfc\xf8\x2b\xe9\x1e\x8b\xa6\x70\x2c\xd2\x56\xe9\x7e\xd3\x8d\x7b\x96\xeb\x43\x2c\x95\xcb\x9f\x93\xdb\x85\x5f\xad\x96\x47\x11\xa4\xae\xeb\xa0\x9d\x45\x63\x5a\x70\x95\x0e\x10\x4a\xea\xcc\xd8\x95\x64\x3b\x31\x3b\x3f\x9b\x8d\xa7\xc7\x86\xec\x8b\x9c\xfe\xef\x7a\xee\xa5\xaa\xd1\xfb\x9d\xe3\x1c\x3e\x9d\x9c\x9e\x75\xee\x30\x61\xfe\x7f\x14\x05\xbd\xa1\x50\x83\x9e\xe3\xcf\x79\xea\x92\x20\x1b\x34\xfe\x35\x7d\xb2\x3b\xbc\xbf\xc2\xb1\xf9\x00\x12\xcd\xd1\x64\x3d\x9c\x8e\x17\xc3\x93\xcf\x5f\x64\xe9\xa5\x33\x3a\xd3\xe4\xe3\x9f\x29\xa3\x8d\x84\x21\x60\x56\x0a\x57\x70\x31\x7d\x51\x03\x0f\x39\x05\xe2\x4a\x5b\x12\x39\x74\x56\xc2\x6c\xb4\x80\x68\x6c\x04\x2a\x76\x86\xfa\x41\xa4\xb7\xdb\xf5\xd0\x9a\x58\x5e\x42\xf5\x32\x9b\x48\x2b\x39\xcf\x85\xe8\xf7\xd1\x49\x09\xc6\x2f\x0f\x8d\xcd\x89\x01\x95\xaf\x29\xd3\x5b\x9d\xc5\xa6\x09\xdc\x89\x85\x07\x8f\x48\x34\x7b\x6c\x34\x4b\xab\x18\x9b\x29\xd9\x08\xa7\x0b\x0c\x78\x29\x36\x45\xf2\x28\xea\x01\x40\xbd\x01\x5c\xf4\x9d\x13\x18\x19\xd3\x2d\x76\xd0\x3f\xce\x6e\x5c\x51\xf4\xa3\x8f\x8d\x6b\xf2\x1b\x46\x6d\x44\xa1\x0b\xaa\xc5\x89\xc8\x2a\x23\x77\xaf\xa9\x46\x0e\x3a\x6b\x0c\x8a\x98\x77\x6b\xc8\x9c\xdd\xea\xa2\xe9\xa9\x3e\xc6\x12\x79\xbf\x2d\x58\xea\xc9\x3c\x75\x51\x52\x52\x7a\xbf\x9a\x4c\x67\xd7\x57\x9d\x0b\x72\x5a\xae\xae\xbf\xcf\xe6\x13\x51\xe8\x49\x8b\xe1\x55\x0c\xd5\x13\xb2\xc6\x8d\xc8\x99\xa8\x5f\x01\x00\x00\xff\xff\xb1\x50\xa8\xa9\x4e\x04\x00\x00")

func docsUsageTxtBytes() ([]byte, error) {
	return bindataRead(
		_docsUsageTxt,
		"docs/usage.txt",
	)
}

func docsUsageTxt() (*asset, error) {
	bytes, err := docsUsageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/usage.txt", size: 1102, mode: os.FileMode(436), modTime: time.Unix(1444273964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/usage.txt": docsUsageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docs": {nil, map[string]*bintree{
		"usage.txt": {docsUsageTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
